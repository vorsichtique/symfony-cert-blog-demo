# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    parameter_injection_mail: 'hola@example.com'

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    CertificationBundle\:
        resource: '../../src/CertificationBundle/*'
    CertificationBundle\Controller\:
        resource: '../../src/CertificationBundle/Controller'
        public: true
        tags: ['controller.service_arguments']


    CertificationBundle\MaluService\ParameterInjection:
        arguments:
          $mail: %parameter_injection_mail%



    # https://symfony.com/doc/current/service_container.html#explicitly-configuring-services-and-arguments
    malu.manuelwiring.standarduser:
        class: CertificationBundle\MaluService\ManualWiring
        autowire: false
        arguments:
          $user: 'standarduser'
    malu.manuelwiring.superuser:
        class: CertificationBundle\MaluService\ManualWiring
        public: true
        autowire: false
        arguments:
          $user: 'superuser'
    CertificationBundle\MaluService\ManualWiring: '@malu.manuelwiring.standarduser'


    # how to register a subscriber withoout autoconfigure
    CertificationBundle\EventListener\ManualConfigurationSubscriber:
        autoconfigure: false
        tags:
            - { name: kernel.event_subscriber }


    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    easycorp.easylog.handler:
            class: EasyCorp\EasyLog\EasyLogHandler
            public: false
            arguments:
                - '%kernel.logs_dir%/%kernel.environment%.log'

    CertificationBundle\DataCollector\MaluCollector:
        tags:
            -
                name:     data_collector
                template: 'certification/toolbar.html.twig'
                # must match the value returned by the getName() method
                id:       'app.malu_collector'
                # optional priority
                # priority: 300
        public: false